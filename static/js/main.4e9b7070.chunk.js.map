{"version":3,"sources":["VRScene.js","App.js","serviceWorker.js","index.js"],"names":["Div","styled","div","props","width","height","Video","video","Canvas","canvas","AScene","embedded","position","color","VRScene","refV","useRef","refC1","refC2","refC3","refC4","useState","setWidth","refVideo","setHeight","useEffect","current","setSrcObject","a","navigator","mediaDevices","getUserMedia","facingMode","srcObject","addEventListener","play","videoWidth","videoHeight","useVideo","refCanvas","gl","getContext","clearColor","clear","COLOR_BUFFER_BIT","glInit","useGl","text","coord","fillText","x","y","use2dText","scene","Scene","camera","PerspectiveCamera","geometry","BoxGeometry","material","MeshBasicMaterial","cube","Mesh","add","z","renderer","WebGLRenderer","alpha","setSize","animate","requestAnimationFrame","rotation","render","useThree","className","ref","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4e9b7070.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport { BoxGeometry, Mesh, MeshBasicMaterial, PerspectiveCamera, Scene, WebGLRenderer } from 'three'\n\nconst Div = styled.div`\n  width: ${props => `${props.width}px` || 'auto'}\n  height: ${props => `${props.height}px` || 'auto'}\n`\n\nconst Video = styled.video`\n  position: absolute\n`\n\nconst Canvas = styled.canvas`\n  position: absolute\n  width: ${props => `${props.width}px` || 'auto'}\n  height: ${props => `${props.height}px` || 'auto'}\n`\n\nconst rawAScene = () => <a-scene embedded><a-box position=\"0 1 -4\" color=\"yellow\"></a-box></a-scene>\nconst AScene = styled(rawAScene)`\n  a-scene {\n    width: ${props => `${props.width}px` || 'auto'}\n    height: ${props => `${props.height}px` || 'auto'}\n  }\n`\n\nconst useVideo = ({ refVideo, setWidth, setHeight }) => {\n  useEffect(() => {\n    const video = refVideo.current\n    const setSrcObject = async () => {\n      video.srcObject = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })\n    }\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      setSrcObject()\n    }\n    video.addEventListener('loadeddata', video.play)\n    video.addEventListener('loadedmetadata', () => {\n      setWidth(video.videoWidth)\n      setHeight(video.videoHeight)\n    })\n  })\n}\n\nconst use2dText = ({ refCanvas, text, coord }) => {\n  useEffect(() => {\n    const canvas = refCanvas.current\n    const context = canvas.getContext('2d')\n    context.fillText(text, coord.x, coord.y, 40)\n  })\n}\n\nconst glInit = gl => {\n  gl.clearColor(0.0, 0.0, 0.0, 0.5)\n  gl.clear(gl.COLOR_BUFFER_BIT)\n}\n\n// god is now here : https://wgld.org/\nconst useGl = ({ refCanvas }) => {\n  useEffect(() => {\n    const canvas = refCanvas.current\n    const gl = canvas.getContext('webgl2')\n    if (gl) {\n      glInit(gl)\n    }\n  })\n}\n\nconst useThree = ({ refCanvas }) => {\n  const scene = new Scene()\n  const camera = new PerspectiveCamera(90)\n  const geometry = new BoxGeometry(1, 1, 1)\n  const material = new MeshBasicMaterial({ color: 0x00ff00 })\n  const cube = new Mesh(geometry, material)\n  scene.add(cube)\n  camera.position.z = 5\n\n  useEffect(() => {\n    const canvas = refCanvas.current\n    const renderer = new WebGLRenderer({ canvas, alpha: true })\n    renderer.setSize(canvas.width, canvas.height)\n\n    const animate = () => {\n      requestAnimationFrame(animate)\n\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n\n      renderer.render(scene, camera)\n    }\n    animate()\n  })\n}\n\nconst VRScene = () => {\n  const refV = useRef()\n  const refC1 = useRef()\n  const refC2 = useRef()\n  const refC3 = useRef()\n  const refC4 = useRef()\n  const [width, setWidth] = useState()\n  const [height, setHeight] = useState()\n\n  useVideo({ refVideo: refV, setWidth, setHeight })\n  useGl({ refCanvas: refC1 })\n  use2dText({ refCanvas: refC2, text: 'World', coord: { x: 20, y: 40 } })\n  useThree({ refCanvas: refC3 })\n\n  return (\n    <Div className='vrscene' width={width} height={height}>\n      <Video ref={refV} />\n      <Canvas ref={refC1} width={width} height={height} />\n      <Canvas ref={refC2} width={width} height={height} />\n      <Canvas ref={refC3} width={width} height={height} />\n      <Canvas ref={refC4} width={width} height={height} />\n      <AScene canvas={refC4} width={width} height={height} />\n    </Div>\n  )\n}\n\nexport default VRScene\n","import React from 'react';\nimport VRScene from './VRScene'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VRScene />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}