{"version":3,"sources":["VRScene.js","App.js","serviceWorker.js","index.js"],"names":["RealWorld","videoEl","aplaneRef","useRef","useState","pause","setPause","useEffect","video","current","aplane","addEventListener","setAttribute","value","primitive","width","videoWidth","height","videoHeight","x","y","z","ref","VRScene","stream","setStream","play","srcObject","a","navigator","mediaDevices","getUserMedia","facingMode","frameRate","ideal","max","setVideoSource","className","stats","id","camera","look-controls","wasd-controls","position","geometry","rotation","material","radius","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"qMAGMA,G,MAAY,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACbC,EAAYC,mBADe,EAEPC,oBAAS,GAFF,mBAE1BC,EAF0B,KAEnBC,EAFmB,KAwBjC,OAnBAC,qBAAU,WACR,IAAMC,EAAQP,EAAQQ,QAChBC,EAASR,EAAUO,QACzBD,EAAMG,iBAAiB,cAAc,WAC9BN,IACLK,EAAOE,aAAa,OAAQ,CAAEC,MAAO,KACrCH,EAAOE,aAAa,WAAY,CAAEE,UAAW,UAC7CJ,EAAOE,aAAa,WAAY,CAAEG,MAAOP,EAAMQ,WAAYC,OAAQT,EAAMU,cACzER,EAAOE,aAAa,WAAY,CAAEO,EAAG,EAAGC,EAAG,EAAGC,EAASb,EAAMU,YAAc,GAAzB,IAClDR,EAAOE,aAAa,WAAY,MAAO,WAXjBN,GAAS,OAc7BD,IACFK,EAAOE,aAAa,OAAQ,CAAEC,MAAO,uBACrCH,EAAOE,aAAa,WAAY,CAAEG,MAAO,IAAKE,OAAQ,MACtDP,EAAOE,aAAa,WAAY,CAAEO,EAAG,EAAGC,EAAG,EAAGC,GAAI,UAI/C,8BAAUC,IAAKpB,MAoCTqB,EAjCC,WACd,IAAMtB,EAAUE,mBADI,EAEQC,qBAFR,mBAEboB,EAFa,KAELC,EAFK,KAcpB,OAVAlB,qBAAU,WACR,IAAMC,EAAQP,EAAQQ,QACtBD,EAAMG,iBAAiB,aAAcH,EAAMkB,MAC3ClB,EAAMmB,UAAYH,EACE,uCAAG,sBAAAI,EAAA,kEACrBH,EADqB,SACLI,UAAUC,aAAaC,aAAa,CAAEvB,MAAO,CAAEwB,WAAY,cAAeC,UAAW,CAAEC,MAAO,EAAGC,IAAK,OADjG,6EAAH,oDAGpBC,MAIA,yBAAKC,UAAU,WACb,6BAASC,OAAK,GACZ,iCACE,2BAAOC,GAAG,SAASjB,IAAKrB,KAE1B,8BAAUuC,QAAM,EAACC,iBAAA,EAAcC,iBAAA,EAAcC,SAAS,WACpD,kBAAC,EAAD,CAAW1C,QAASA,KAEtB,8BAAU2C,SAAS,iBAAiBD,SAAS,YAAYE,SAAS,SAASC,SAAS,kBACpF,8BAAUF,SAAS,oBAAoBD,SAAS,YAAYI,OAAO,OAAOD,SAAS,gBACnF,8BAAUF,SAAS,sBAAsBD,SAAS,YAAYI,OAAO,MAAM9B,OAAO,MAAM6B,SAAS,eACjG,8BAAUF,SAAS,wCAAwCD,SAAS,SAASE,SAAS,UAAUC,SAAS,kBACzG,2BAAOA,SAAS,oBC9CTE,MARf,WACE,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,QCMcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB5B,WACrBA,UAAU6B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f76affaa.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport 'aframe'\n\nconst RealWorld = ({ videoEl }) => {\n  const aplaneRef = useRef()\n  const [pause, setPause] = useState(true)\n  const showVideo = () => { setPause(false) }\n\n  useEffect(() => {\n    const video = videoEl.current\n    const aplane = aplaneRef.current\n    video.addEventListener('loadeddata', () => {\n      if (!pause) return\n      aplane.setAttribute('text', { value: '' })\n      aplane.setAttribute('geometry', { primitive: 'plane' })\n      aplane.setAttribute('geometry', { width: video.videoWidth, height: video.videoHeight })\n      aplane.setAttribute('position', { x: 0, y: 0, z: -1 * (video.videoHeight / 2) })\n      aplane.setAttribute('material', 'src', '#webcam')\n      showVideo()\n    })\n    if (pause) {\n      aplane.setAttribute('text', { value: 'camera loading ...' })\n      aplane.setAttribute('geometry', { width: 800, height: 600 })\n      aplane.setAttribute('position', { x: 0, y: 0, z: -400 })\n    }\n  })\n\n  return <a-entity ref={aplaneRef} />\n}\n\nconst VRScene = () => {\n  const videoEl = useRef()\n  const [stream, setStream] = useState()\n\n  useEffect(() => {\n    const video = videoEl.current\n    video.addEventListener('loadeddata', video.play)\n    video.srcObject = stream\n    const setVideoSource = async () => {\n      setStream(await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment', frameRate: { ideal: 2, max: 10 } } }))\n    }\n    setVideoSource()\n  })\n\n  return (\n    <div className='vrscene'>\n      <a-scene stats>\n        <a-asset>\n          <video id='webcam' ref={videoEl} />\n        </a-asset>\n        <a-entity camera look-controls wasd-controls position=\"0 1.6 4\">\n          <RealWorld videoEl={videoEl} />\n        </a-entity>\n        <a-entity geometry=\"primitive: box\" position=\"-1 0.5 -3\" rotation=\"0 45 0\" material=\"color: yellow\"></a-entity>\n        <a-entity geometry=\"primitive: sphere\" position=\"0 1.25 -5\" radius=\"1.25\" material=\"color: pink\"></a-entity>\n        <a-entity geometry=\"primitive: cylinder\" position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" material=\"color: red\"></a-entity>\n        <a-entity geometry=\"primitive: plane; height: 2; width: 2\" position=\"0 0 -4\" rotation=\"-90 0 0\" material=\"color: purple\"></a-entity>\n        <a-sky material=\"color: black\" />\n      </a-scene>\n    </div>\n  )\n}\n\nexport default VRScene\n","import React from 'react';\nimport VRScene from './VRScene'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VRScene />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}