{"version":3,"sources":["asset/bowling.glb","Video.js","Aframe.js","VRScene.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Video","styled","video","AScene","props","embedded","vr-mode-ui","keyboard-shortcuts","stats","children","width","height","AFrameScene","position","scale","rotation","gltf-model","BowlingGlb","color","Div","div","VRScene","refV","useRef","useState","setWidth","refVideo","setHeight","useEffect","current","setSrcObject","a","navigator","mediaDevices","getUserMedia","facingMode","srcObject","addEventListener","play","videoWidth","videoHeight","useVideo","className","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,qC,sRCGpC,IAAMC,EAAQC,IAAOC,MAAV,K,+ICElB,IAEMC,EAASF,aAFG,SAAAG,GAAK,OAAI,6BAASC,UAAQ,EAACC,aAAW,iBAAiBC,qBAAmB,iBAAiBC,OAAK,GAAGJ,EAAMK,YAE5GR,CAAH,KAEC,SAAAG,GAAK,OAAIA,EAAMM,SACd,SAAAN,GAAK,OAAIA,EAAMO,UAIvBC,EAAc,SAAC,GAAuB,IAArBF,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC5B,OAAKA,EAGH,kBAACR,EAAD,CAAQO,MAAOA,EAAOC,OAAQA,GAC5B,8BAAUE,SAAS,YAAYC,MAAM,iBAAiBC,SAAS,SAASC,aAAYC,MACpF,2BAAOJ,SAAS,SAASK,MAAM,YALf,+B,wGCRtB,IAAMC,EAAMlB,IAAOmB,IAAV,KACE,SAAAhB,GAAK,OAAIA,EAAMM,SACd,SAAAN,GAAK,OAAIA,EAAMO,UAiCZU,EAxBC,WACd,IAAMC,EAAOC,mBADO,EAKMC,qBALN,mBAKbd,EALa,KAKNe,EALM,OAMQD,qBANR,mBAMbb,EANa,KAapB,OFxBsB,SAAC,GAAuC,IAArCe,EAAoC,EAApCA,SAAUD,EAA0B,EAA1BA,SAAUE,EAAgB,EAAhBA,UAC7CC,qBAAU,WACR,IAAM1B,EAAQwB,EAASG,QACjBC,EAAY,uCAAG,sBAAAC,EAAA,sEACKC,UAAUC,aAAaC,aAAa,CAAEhC,MAAO,CAAEiC,WAAY,iBADhE,OACnBjC,EAAMkC,UADa,kDAAH,qDAGdJ,UAAUC,cAAgBD,UAAUC,aAAaC,cACnDJ,IAEF5B,EAAMmC,iBAAiB,aAAcnC,EAAMoC,MAC3CpC,EAAMmC,iBAAiB,kBAAkB,WACvCZ,EAASvB,EAAMqC,YACfZ,EAAUzB,EAAMsC,mBEOpBC,CAAS,CAAEf,SAAUJ,EAAMG,WAAUE,UARjB,OAclB,kBAACR,EAAD,CAAKuB,UAAU,UAAUhC,MAAOA,EAAOC,OAAQA,GAC7C,kBAACX,EAAD,CAAO2C,IAAKrB,IAIZ,kBAAC,EAAD,CAAaZ,MAAOA,EAAOC,OAAQA,MC1B1BiC,MARf,WACE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,QCMcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBrB,WACrBA,UAAUsB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.22012f18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bowling.d52770fe.glb\";","import { useEffect } from 'react'\nimport styled from 'styled-components'\n\nexport const Video = styled.video`\n  position: absolute\n`\n\nexport const useVideo = ({ refVideo, setWidth, setHeight }) => {\n  useEffect(() => {\n    const video = refVideo.current\n    const setSrcObject = async () => {\n      video.srcObject = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })\n    }\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      setSrcObject()\n    }\n    video.addEventListener('loadeddata', video.play)\n    video.addEventListener('loadedmetadata', () => {\n      setWidth(video.videoWidth)\n      setHeight(video.videoHeight)\n    })\n  })\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport BowlingGlb from './asset/bowling.glb'\n\nconst rawAScene = props => <a-scene embedded vr-mode-ui='enabled: false' keyboard-shortcuts='enterVR: false' stats >{props.children}</a-scene>\n\nconst AScene = styled(rawAScene)`\n  a-scene {\n    width: ${props => props.width}px\n    height: ${props => props.height}px\n  }\n`\n\nconst AFrameScene = ({ width, height }) => {\n  if (!height) return <div />\n\n  return (\n    <AScene width={width} height={height}>\n      <a-entity position='-0.5 1 -3' scale='0.01 0.01 0.01' rotation='90 0 0' gltf-model={BowlingGlb}></a-entity>\n      <a-box position='1 1 -4' color='yellow'></a-box>\n    </AScene>\n  )\n}\n\nexport { AFrameScene }\n","import React, { useRef, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Video, useVideo } from './Video'\n// import { use2dText, useGl, useThree } from './myEffect'\nimport { AFrameScene } from './Aframe'\n\nconst Div = styled.div`\n  width: ${props => props.width}px\n  height: ${props => props.height}px\n`\n\n// const Canvas = styled.canvas`\n//   position: absolute\n//   width: ${props => props.width}px\n//   height: ${props => props.height}px\n// `\n\nconst VRScene = () => {\n  const refV = useRef()\n  // const refC1 = useRef()\n  // const refC2 = useRef()\n  // const refC3 = useRef()\n  const [width, setWidth] = useState()\n  const [height, setHeight] = useState()\n\n  useVideo({ refVideo: refV, setWidth, setHeight })\n  // useGl({ refCanvas: refC1 })\n  // use2dText({ refCanvas: refC2, text: 'Hello World', coord: { x: 20, y: 40 } })\n  // useThree({ refCanvas: refC3 })\n\n  return (\n    <Div className='vrscene' width={width} height={height}>\n      <Video ref={refV} />\n      {/* <Canvas ref={refC1} width={width} height={height} /> */}\n      {/* <Canvas ref={refC2} width={width} height={height} /> */}\n      {/* <Canvas ref={refC3} width={width} height={height} /> */}\n      <AFrameScene width={width} height={height}></AFrameScene>\n    </Div>\n  )\n}\n\nexport default VRScene\n","import React from 'react';\nimport VRScene from './VRScene'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VRScene />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}