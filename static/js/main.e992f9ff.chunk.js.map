{"version":3,"sources":["Video.js","Aframe.js","Accelerometer.js","VRScene.js","App.js","serviceWorker.js","index.js"],"names":["Video","styled","video","AScene","props","embedded","vr-mode-ui","keyboard-shortcuts","stats","children","width","height","AFrameScene","position","camera","look-controls","geometry","material","Accelerometer","useState","x","y","z","acceleration","setAcceleration","useEffect","motionHandler","ev","window","addEventListener","removeEventListener","className","Div","div","VRScene","refV","useRef","setWidth","refVideo","setHeight","current","setSrcObject","a","navigator","mediaDevices","getUserMedia","facingMode","srcObject","play","videoWidth","videoHeight","useVideo","ref","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAGO,IAAMA,EAAQC,IAAOC,MAAV,K,8HCElB,IAEMC,EAASF,aAFG,SAAAG,GAAK,OAAI,6BAASC,UAAQ,EAACC,aAAW,iBAAiBC,qBAAmB,iBAAiBC,OAAK,GAAGJ,EAAMK,YAE5GR,CAAH,KAEC,SAAAG,GAAK,OAAIA,EAAMM,SACd,SAAAN,GAAK,OAAIA,EAAMO,UAIvBC,EAAc,SAAC,GAAuB,IAArBF,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC5B,OAAKA,EAGH,kBAACR,EAAD,CAAQO,MAAOA,EAAOC,OAAQA,GAC5B,8BAAUE,SAAS,WACjB,8BAAUC,QAAM,EAACC,iBAAA,KAInB,8BAAUC,SAAS,sDAAsDC,SAAS,gBAAgBJ,SAAS,UAC3G,8BAAUG,SAAS,sDAAsDC,SAAS,gBAAgBJ,SAAS,UAC3G,8BAAUG,SAAS,sDAAsDC,SAAS,gBAAgBJ,SAAS,UAC3G,8BAAUG,SAAS,sDAAsDC,SAAS,gBAAgBJ,SAAS,UAC3G,8BAAUG,SAAS,sDAAsDC,SAAS,gBAAgBJ,SAAS,WAb3F,+BCbTK,EAAgB,WAAO,IAAD,EACOC,mBAAS,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,IADjC,mBAC1BC,EAD0B,KACZC,EADY,KAWjC,OARAC,qBAAU,WACR,IAAMC,EAAgB,SAAAC,GAAE,OAAIH,EAAgBG,EAAGJ,eAG/C,OAFAK,OAAOC,iBAAiB,eAAgBH,GAEjCE,OAAOE,oBAAoB,eAAgBJ,MAKlD,yBAAKK,UAAU,iBACb,8CAAgBR,EAAaH,IAC7B,8CAAgBG,EAAaF,IAC7B,8CAAgBE,EAAaD,M,wGCTnC,IAAMU,EAAM/B,IAAOgC,IAAV,KACE,SAAA7B,GAAK,OAAIA,EAAMM,SACd,SAAAN,GAAK,OAAIA,EAAMO,UAkCZuB,EAzBC,WACd,IAAMC,EAAOC,mBADO,EAKMjB,qBALN,mBAKbT,EALa,KAKN2B,EALM,OAMQlB,qBANR,mBAMbR,EANa,KAapB,OHzBsB,SAAC,GAAuC,IAArC2B,EAAoC,EAApCA,SAAUD,EAA0B,EAA1BA,SAAUE,EAAgB,EAAhBA,UAC7Cd,qBAAU,WACR,IAAMvB,EAAQoC,EAASE,QACjBC,EAAY,uCAAG,sBAAAC,EAAA,sEACKC,UAAUC,aAAaC,aAAa,CAAE3C,MAAO,CAAE4C,WAAY,iBADhE,OACnB5C,EAAM6C,UADa,kDAAH,qDAGdJ,UAAUC,cAAgBD,UAAUC,aAAaC,cACnDJ,IAEFvC,EAAM2B,iBAAiB,aAAc3B,EAAM8C,MAC3C9C,EAAM2B,iBAAiB,kBAAkB,WACvCQ,EAASnC,EAAM+C,YACfV,EAAUrC,EAAMgD,mBGQpBC,CAAS,CAAEb,SAAUH,EAAME,WAAUE,UARjB,OAclB,kBAACP,EAAD,CAAKD,UAAU,UAAUrB,MAAOA,EAAOC,OAAQA,GAC7C,kBAAC,EAAD,MACA,kBAACX,EAAD,CAAOoD,IAAKjB,IAIZ,kBAAC,EAAD,CAAazB,MAAOA,EAAOC,OAAQA,MC5B1B0C,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCMcuB,QACW,cAA7B1B,OAAO2B,SAASC,UAEe,UAA7B5B,OAAO2B,SAASC,UAEhB5B,OAAO2B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBlB,WACrBA,UAAUmB,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e992f9ff.chunk.js","sourcesContent":["import { useEffect } from 'react'\nimport styled from 'styled-components'\n\nexport const Video = styled.video`\n  position: absolute\n`\n\nexport const useVideo = ({ refVideo, setWidth, setHeight }) => {\n  useEffect(() => {\n    const video = refVideo.current\n    const setSrcObject = async () => {\n      video.srcObject = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })\n    }\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      setSrcObject()\n    }\n    video.addEventListener('loadeddata', video.play)\n    video.addEventListener('loadedmetadata', () => {\n      setWidth(video.videoWidth)\n      setHeight(video.videoHeight)\n    })\n  })\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\n// import BowlingGlb from './asset/bowling.glb'\n\nconst rawAScene = props => <a-scene embedded vr-mode-ui='enabled: false' keyboard-shortcuts='enterVR: false' stats >{props.children}</a-scene>\n\nconst AScene = styled(rawAScene)`\n  a-scene {\n    width: ${props => props.width}px\n    height: ${props => props.height}px\n  }\n`\n\nconst AFrameScene = ({ width, height }) => {\n  if (!height) return <div />\n\n  return (\n    <AScene width={width} height={height}>\n      <a-entity position='0 1.6 0'>\n        <a-entity camera look-controls></a-entity>\n      </a-entity>\n      {/* <a-entity position='-0.5 1 -3' scale='0.01 0.01 0.01' rotation='90 0 0' gltf-model={BowlingGlb}></a-entity> */}\n      {/* <a-box position='1 1 -4' color='yellow'></a-box> */}\n      <a-entity geometry='primitive: cone; radiusBottom: 0.1; radiusTop: 0.01' material='color: yellow' position='0 0 0'></a-entity>\n      <a-entity geometry='primitive: cone; radiusBottom: 0.1; radiusTop: 0.01' material='color: yellow' position='1 0 0'></a-entity>\n      <a-entity geometry='primitive: cone; radiusBottom: 0.1; radiusTop: 0.01' material='color: yellow' position='2 0 0'></a-entity>\n      <a-entity geometry='primitive: cone; radiusBottom: 0.1; radiusTop: 0.01' material='color: yellow' position='3 0 0'></a-entity>\n      <a-entity geometry='primitive: cone; radiusBottom: 0.1; radiusTop: 0.01' material='color: yellow' position='4 0 0'></a-entity>\n    </AScene>\n  )\n}\n\nexport { AFrameScene }\n","import React, { useEffect, useState } from 'react'\n\nexport const Accelerometer = () => {\n  const [acceleration, setAcceleration] = useState({ x: 0, y: 0, z: 0 })\n\n  useEffect(() => {\n    const motionHandler = ev => setAcceleration(ev.acceleration)\n    window.addEventListener('devicemotion', motionHandler)\n\n    return window.removeEventListener('devicemotion', motionHandler)\n  })\n\n\n  return (\n    <div className='accelerometer'>\n      <div>{`X-axis ${acceleration.x}`}</div>\n      <div>{`Y-axis ${acceleration.y}`}</div>\n      <div>{`Z-axis ${acceleration.z}`}</div>\n    </div>\n  )\n}\n","import React, { useRef, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Video, useVideo } from './Video'\n// import { use2dText, useGl, useThree } from './myEffect'\nimport { AFrameScene } from './Aframe'\nimport {Accelerometer} from './Accelerometer'\n\nconst Div = styled.div`\n  width: ${props => props.width}px\n  height: ${props => props.height}px\n`\n\n// const Canvas = styled.canvas`\n//   position: absolute\n//   width: ${props => props.width}px\n//   height: ${props => props.height}px\n// `\n\nconst VRScene = () => {\n  const refV = useRef()\n  // const refC1 = useRef()\n  // const refC2 = useRef()\n  // const refC3 = useRef()\n  const [width, setWidth] = useState()\n  const [height, setHeight] = useState()\n\n  useVideo({ refVideo: refV, setWidth, setHeight })\n  // useGl({ refCanvas: refC1 })\n  // use2dText({ refCanvas: refC2, text: 'Hello World', coord: { x: 20, y: 40 } })\n  // useThree({ refCanvas: refC3 })\n\n  return (\n    <Div className='vrscene' width={width} height={height}>\n      <Accelerometer />\n      <Video ref={refV} />\n      {/* <Canvas ref={refC1} width={width} height={height} /> */}\n      {/* <Canvas ref={refC2} width={width} height={height} /> */}\n      {/* <Canvas ref={refC3} width={width} height={height} /> */}\n      <AFrameScene width={width} height={height}></AFrameScene>\n    </Div>\n  )\n}\n\nexport default VRScene\n","import React from 'react';\nimport VRScene from './VRScene'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VRScene />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}