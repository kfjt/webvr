{"version":3,"sources":["VRScene.js","App.js","serviceWorker.js","index.js"],"names":["Video","videoEl","useEffect","video","current","a","navigator","mediaDevices","getUserMedia","facingMode","frameRate","ideal","max","srcObject","setVideoStream","ref","Sky","dataUrl","id","alt","src","VRScene","useRef","canvasEl","useState","back","setBack","canvas","addEventListener","width","videoWidth","height","videoHeight","style","display","updateCanvas","getContext","drawImage","toDataURL","requestAnimationFrame","play","cancelAnimationFrame","className","geometry","position","rotation","material","radius","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"qMAGMA,EAAQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QASf,OARAC,qBAAU,WACR,IAAMC,EAAQF,EAAQG,SACF,uCAAG,sBAAAC,EAAA,sEACGC,UAAUC,aAAaC,aAAa,CAAEL,MAAO,CAAEM,WAAY,cAAeC,UAAW,CAAEC,MAAO,EAAGC,IAAK,OADzG,OACrBT,EAAMU,UADe,kDAAH,qDAGpBC,KACC,CAACb,IAEG,2BAAOc,IAAKd,KAGfe,EAAM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiBA,EAAU,yBAAKC,GAAG,MAAMC,IAAI,MAAMC,IAAKH,IAAc,0BAAMC,GAAG,SA8C5EG,EA5CC,WACd,IAAMpB,EAAUqB,mBACVC,EAAWD,mBAFG,EAGIE,qBAHJ,mBAGbC,EAHa,KAGPC,EAHO,KAyBpB,OApBAxB,qBAAU,WACR,IAAMC,EAAQF,EAAQG,QAChBuB,EAASJ,EAASnB,QACxBD,EAAMyB,iBAAiB,kBAAkB,WACvCD,EAAOE,MAAQ1B,EAAM2B,WACrBH,EAAOI,OAAS5B,EAAM6B,YACtB7B,EAAM8B,MAAMC,QAAU,UAExB,IAAMC,EAAe,SAAfA,IACQR,EAAOS,WAAW,MAC1BC,UAAUlC,EAAO,EAAG,GACxBuB,EAAQC,EAAOW,aACfC,sBAAsBJ,IAKxB,OAHAhC,EAAMyB,iBAAiB,aAAczB,EAAMqC,MAC3CrC,EAAMyB,iBAAiB,aAAcO,GAE9B,kBAAMM,qBAAqBN,MACjC,IAGD,yBAAKO,UAAU,WACb,kBAAC,EAAD,CAAOzC,QAASA,IAChB,4BAAQc,IAAKQ,IACb,iCACE,kCACE,kBAAC,EAAD,CAAKN,QAASQ,KAEhB,6BAASL,IAAI,SACb,8BAAUuB,SAAS,iBAAiBC,SAAS,YAAYC,SAAS,SAASC,SAAS,kBACpF,8BAAUH,SAAS,oBAAoBC,SAAS,YAAYG,OAAO,OAAOD,SAAS,kBACnF,8BAAUH,SAAS,sBAAsBC,SAAS,YAAYG,OAAO,MAAMhB,OAAO,MAAMe,SAAS,kBACjG,8BAAUH,SAAS,mBAAmBC,SAAS,SAASC,SAAS,UAAUhB,MAAM,IAAIE,OAAO,IAAIe,SAAS,qBC3ClGE,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCMcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBnD,WACrBA,UAAUoD,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.cb940303.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\n// import back from './landscape-3531355_960_720.jpg'\n\nconst Video = ({ videoEl }) => {\n  useEffect(() => {\n    const video = videoEl.current\n    const setVideoStream = async () => {\n      video.srcObject = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment', frameRate: { ideal: 2, max: 10 } } })\n    }\n    setVideoStream()\n  }, [videoEl])\n\n  return <video ref={videoEl} />\n}\n\nconst Sky = ({ dataUrl }) => dataUrl ? <img id='sky' alt='sky' src={dataUrl} /> : <span id='sky' />\n\nconst VRScene = () => {\n  const videoEl = useRef()\n  const canvasEl = useRef()\n  const [back, setBack] = useState()\n\n  useEffect(() => {\n    const video = videoEl.current\n    const canvas = canvasEl.current\n    video.addEventListener('loadedmetadata', () => {\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n      video.style.display = 'none'\n    })\n    const updateCanvas = () => {\n      const ctx = canvas.getContext('2d')\n      ctx.drawImage(video, 0, 0)\n      setBack(canvas.toDataURL())\n      requestAnimationFrame(updateCanvas)\n    }\n    video.addEventListener('loadeddata', video.play)\n    video.addEventListener('loadeddata', updateCanvas)\n\n    return () => cancelAnimationFrame(updateCanvas)\n  }, [])\n\n  return (\n    <div className='vrscene'>\n      <Video videoEl={videoEl} />\n      <canvas ref={canvasEl} />\n      <a-scene>\n        <a-assets>\n          <Sky dataUrl={back} />\n        </a-assets>\n        <a-image src=\"#sky\" />\n        <a-entity geometry=\"primitive: box\" position=\"-1 0.5 -3\" rotation=\"0 45 0\" material=\"color:#4CC3D9\"></a-entity>\n        <a-entity geometry=\"primitive: sphere\" position=\"0 1.25 -5\" radius=\"1.25\" material=\"color:#EF2D5E\"></a-entity>\n        <a-entity geometry=\"primitive: cylinder\" position=\"1 0.75 -3\" radius=\"0.5\" height=\"1.5\" material=\"color:#FFC65D\"></a-entity>\n        <a-entity geometry=\"primitive: plane\" position=\"0 0 -4\" rotation=\"-90 0 0\" width=\"4\" height=\"4\" material=\"color:#7BC8A4\"></a-entity>\n        {/* <a-sky src=\"#sky\" /> */}\n      </a-scene>\n    </div>\n  )\n}\n\nexport default VRScene;\n","import React from 'react';\nimport VRScene from './VRScene'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VRScene />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}